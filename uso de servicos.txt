Para transformar seu script Bash em um **serviço gerenciado pelo `systemd`** no Linux, você pode seguir as etapas abaixo. Isso permitirá que você inicie, pare e reinicie o serviço de maneira mais controlada, garantindo que os programas Python sejam executados e interrompidos corretamente.

### Passos para Criar o Serviço com `systemd`

#### 1. **Crie o script Bash em um diretório apropriado**

Salve o seu script Bash em um local seguro, por exemplo, `/usr/local/bin/publish_service.sh`. O script que você enviou deve ser salvo com as permissões corretas para ser executado.

Edite o script, garantindo que ele tenha as permissões corretas:

```bash
sudo nano /usr/local/bin/publish_service.sh
```

Adicione o conteúdo do seu script:

```bash
#!/bin/bash

while true
do
    # Matar todos os processos python3 antes de reiniciar
    killall python3

    echo "Starting The Publishing"

    sleep 5

    # Executa os scripts Python em segundo plano
    python3 /caminho/para/ultrassonic_file_writer.py &
    python3 /caminho/para/ultrassonic_file_reader.py &
    python3 /caminho/para/check_connection.py &
   
    # Espera todos os processos Python terminarem
    wait
done
```

Garanta que o script tenha permissões de execução:

```bash
sudo chmod +x /usr/local/bin/publish_service.sh
```

#### 2. **Crie o arquivo de serviço `systemd`**

Agora, você vai criar um arquivo de serviço `systemd` que gerenciará o seu script Bash. Para isso, crie um novo arquivo de serviço em `/etc/systemd/system/`.

```bash
sudo nano /etc/systemd/system/publish_service.service
```

Dentro deste arquivo, adicione a configuração abaixo:

```ini
[Unit]
Description=Serviço de Publicação de Dados de Ultrassom

# Garante que a rede esteja ativa antes de iniciar o serviço
After=network.target

[Service]
# Caminho do script bash
ExecStart=/usr/local/bin/publish_service.sh
# O serviço será reiniciado se houver falhas
Restart=on-failure
# Definir o ambiente ou usuário apropriado (opcional)
User=pi  # Defina o usuário correto, se necessário

[Install]
# Garante que o serviço inicie no boot
WantedBy=multi-user.target
```

#### 3. **Carregar e habilitar o serviço no `systemd`**

Agora, vamos garantir que o serviço seja carregado corretamente no `systemd` e configurado para iniciar automaticamente no boot.

1. **Recarregar os arquivos de serviço:**

```bash
sudo systemctl daemon-reload
```

2. **Habilitar o serviço para iniciar automaticamente no boot:**

```bash
sudo systemctl enable publish_service.service
```

3. **Iniciar o serviço:**

```bash
sudo systemctl start publish_service.service
```

4. **Verificar o status do serviço:**

Você pode verificar o status do serviço para garantir que ele foi iniciado corretamente:

```bash
sudo systemctl status publish_service.service
```

Isso deve exibir uma mensagem mostrando se o serviço está em execução e, caso haja erros, você verá um log com detalhes do que aconteceu.

#### 4. **Gerenciar o Serviço com `systemd`**

Agora que o serviço está configurado, você pode gerenciá-lo facilmente com os seguintes comandos:

- **Iniciar o serviço:**

```bash
sudo systemctl start publish_service.service
```

- **Parar o serviço:**

```bash
sudo systemctl stop publish_service.service
```

- **Reiniciar o serviço:**

```bash
sudo systemctl restart publish_service.service
```

- **Verificar o status:**

```bash
sudo systemctl status publish_service.service
```

#### 5. **Logs do serviço**

Você pode ver os logs gerados pelo serviço usando o comando:

```bash
journalctl -u publish_service.service
```

---

### Benefícios da abordagem com `systemd`:
- **Reinício automático:** Se algum script falhar ou for interrompido, o `systemd` pode reiniciar o serviço automaticamente.
- **Gerenciamento centralizado:** Facilita o controle (iniciar, parar, reiniciar) do serviço.
- **Execução no boot:** Garante que seu serviço seja iniciado automaticamente após o boot do sistema.

Essa abordagem também permite que você faça ajustes, como configurar o tempo de espera para reinicialização ou definir limites de reinicializações em caso de falhas, utilizando os parâmetros do `systemd`.